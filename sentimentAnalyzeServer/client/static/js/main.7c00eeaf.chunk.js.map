{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["axios","require","default","EmotionTable","state","eventList","req","get","console","log","then","resp","listOfEvents","data","authorEvent","eventDetails","Object","entries","map","eventDetial","eventListCollection","style","color","border","setState","catch","err","toString","colorStyle","this","props","fontSize","size","React","Component","App","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","renderTextBox","sendForSentimentAnalysis","url","response","output","sendForEmotionAnalysis","emotions","className","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7c00eeaf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\nconst axios = require('axios').default;\r\n\r\n\r\nclass EmotionTable extends React.Component {\r\n  state = { eventList:[] }\r\n  \r\n  componentDidMount() {\r\n    let url = \"https://api.us-south.natural-language-understanding.watson.cloud.ibm.com/instances/b5711716-691c-4f19-b047-354de52919be\"\r\n    const req = axios.get(url);\r\n    console.log(req);\r\n\r\n  req.then(resp => {\r\n    let listOfEvents = resp.data.authorEvent;\r\n    let listOfEventsAsArray = Object.entries(listOfEvents);\r\n    let eventDetails = listOfEventsAsArray.map((eventDetial)=>{\r\n    let eventListCollection = Object.entries(eventDetial[1])\r\n\r\n    return <tr><td style={{color: \"red\",border: \"1px solid black\"}}>{eventListCollection[4][1]} </td>\r\n    <td style={{color: \"red\",border: \"1px solid black\"}}> {eventListCollection[5][1]} </td>\r\n    <td style={{color: \"red\",border: \"1px solid black\"}}> {eventListCollection[7][1]}</td>\r\n    <td style={{color: \"red\",border: \"1px solid black\"}}> {eventListCollection[10][1]}</td>\r\n    <td style={{color: \"red\",border: \"1px solid black\"}}> {eventListCollection[11][1]}</td></tr>\r\n\r\n    })\r\n\r\n    this.setState({eventList:<table style={{border: \"1px solid black\"}}>\r\n      <tbody>{eventDetails}</tbody>\r\n      </table>})\r\n      })\r\n      .catch(err => {\r\n        console.log(err.toString())\r\n      });\r\n  }\r\n\r\nrender() {\r\n  const colorStyle = { color:this.props.color,fontSize:this.props.size+\"px\"}\r\n    // eslint-disable-next-line no-unused-vars\r\n    let li_ctr = 0;  \r\n  return ( \r\n    <div style={colorStyle}>\r\n       Events List\r\n        <br/>\r\n            {\r\n            this.state.eventList\r\n            }\r\n    </div>                                       \r\n  );\r\n}\r\n}\r\nexport default EmotionTable;\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\n<title>Sentiment Analyzer</title>\r\n\r\n\r\nclass App extends React.Component {\r\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n            mode: \"text\",\r\n          sentimentOutput:[],\r\n          sentiment:true\r\n        }\r\n  \r\n  renderTextArea = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"url\") {\r\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"text\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    } \r\n  }\r\n\r\n  renderTextBox = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"text\") {\r\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"url\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    }\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({sentiment:true});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n    ret.then((response)=>{\r\n\r\n      //Include code here to check the sentiment and fomrat the data accordingly\r\n\r\n      this.setState({sentimentOutput:response.data});\r\n      let output = response.data;\r\n      if(response.data === \"positive\") {\r\n        output = <div style={{color:\"green\",fontSize:20}}>{response.data}</div>\r\n      } else if (response.data === \"negative\"){\r\n        output = <div style={{color:\"yellow\",fontSize:20}}>{response.data}</div>\r\n      } else {\r\n        output = <div style={{color:\"red\",fontSize:20}}>{response.data}</div>\r\n      }\r\n      this.setState({sentimentOutput:output});\r\n    });\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n    this.setState({sentiment:false});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n\r\n    ret.then((response)=>{\r\n      this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\r\n  });\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (  \r\n      <div className=\"App\">\r\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\r\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\r\n        <br/><br/>\r\n        {this.state.innercomp}\r\n        <br/>\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br/>\r\n            {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App color=\"green\" size=\"20\"/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nreportWebVitals(console.log);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}